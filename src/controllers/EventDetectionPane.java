/**
 * ****************************************************************
 * File: 			EventDetectionPane.java
 * Date Created:  	June 26, 2013
 * Programmer:		Dale Reed
 * 
 * Purpose:			To handle and control aspects related to 
 * 					jumping the videos and graphics to the next or
 * 					previous event based on the device and channel
 * 					selection 
 * 
 * ****************************************************************
 */
package controllers;

import java.awt.BorderLayout;
import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import java.util.Observer;
import java.util.Vector;

import javax.swing.ButtonGroup;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;

import models.DataModelProxy;

import java.awt.Dimension;
import javax.swing.DefaultComboBoxModel;

import objects.DeviceInputMap;

@SuppressWarnings("unchecked")
public class EventDetectionPane extends JPanel implements Observer, ActionListener
{
	private static final long serialVersionUID = 1L;

	//-------------------------------------------------------------------------------------------------------------------------------------
	//-------------------------------------------------------------------------------------------------------------------------------------
	// -- Event Detection Pane Variable Declarations

	/**
	 * Used to notify the rest of the program of any changes that may occur.
	 */
	private DataModelProxy dmp;

	/**
	 * Used in selecting one of the available devices that have been detected.
	 */
	private JComboBox comboDevice;

	/**
	 * Used in selecting the appropriate channel based on the device selection.
	 */
	private JComboBox comboChannel;

	/**
	 * Used in selecting the event to jump to the start of the state change.
	 */
	private JRadioButton frontRadio;
	
	/**
	 * Used in selecting the event to jump to the end of the state change.
	 */
	private JRadioButton backRadio;

	/**
	 * Used in jumping to the next event based on start or end state change selector.
	 */
	private JButton jumpForward;

	/**
	 * Used in jumping to the previous event based on start or end state change selector.
	 */
	private JButton jumpBackward;

	/**
	 * Used for setting the comboDevice to its default when a null model is used.
	 */
	private String[] defaultDeviceModel = new String[] {"Device"};

	/**
	 * Used for setting the comboChannel to its default when a null model is used.
	 */
	private String[] defaultChannelModel = new String[] {"Channel"};
	

	//-------------------------------------------------------------------------------------------------------------------------------------
	//-------------------------------------------------------------------------------------------------------------------------------------
	// -- Event Detection Pane Construction 

	/**
	 * Construct the Event Detection Pane to be displayed in the Data Window.
	 * 
	 * Note: This sets up all the user interface elements to be displayed in the Event Detection Pane.
	 * 		 Most of this code has been generated by Window Builder for Eclipse
	 */
	public EventDetectionPane()
	{
		setBorder(new BevelBorder(BevelBorder.LOWERED, null, null, null, null));
		setSize(new Dimension(323, 124));
		setLayout(new BorderLayout(0, 0));
		GridBagConstraints gbc_panel = new GridBagConstraints();
		gbc_panel.fill = GridBagConstraints.BOTH;
		gbc_panel.gridx = 3;
		gbc_panel.gridy = 0;
		
		JLabel lblErrorDetection = new JLabel("Event Detection");
		add(lblErrorDetection, BorderLayout.NORTH);
		lblErrorDetection.setHorizontalAlignment(SwingConstants.CENTER);
		
		JPanel panel_4 = new JPanel();
		add(panel_4, BorderLayout.SOUTH);
		
		JPanel panel_3 = new JPanel();
		add(panel_3, BorderLayout.CENTER);
		panel_3.setLayout(null);
		
		JLabel lblJumpTo = new JLabel("Jump to:");
		lblJumpTo.setBounds(54, 38, 61, 16);
		panel_3.add(lblJumpTo);
		
		frontRadio = new JRadioButton("Front");
		frontRadio.setEnabled(false);
		frontRadio.setBounds(113, 34, 65, 23);
		panel_3.add(frontRadio);
		frontRadio.addActionListener(this);
		
		backRadio = new JRadioButton("Back");
		backRadio.setEnabled(false);
		backRadio.setBounds(185, 34, 65, 23);
		panel_3.add(backRadio);
		backRadio.addActionListener(this);
		
		comboChannel = new JComboBox();
		comboChannel.setEnabled(false);
		comboChannel.setModel(new DefaultComboBoxModel(new String[] {"Channel"}));
		comboChannel.setBounds(146, 6, 167, 27);
		comboChannel.addActionListener(this);
		panel_3.add(comboChannel);
		
		jumpBackward = new JButton("<<");
		jumpBackward.setEnabled(false);
		jumpBackward.setBounds(59, 59, 90, 29);
		panel_3.add(jumpBackward);
		jumpBackward.addActionListener(this);
		
		jumpForward = new JButton(">>");
		jumpForward.setEnabled(false);
		jumpForward.setActionCommand(">>");
		jumpForward.setBounds(146, 59, 90, 29);
		panel_3.add(jumpForward);
		jumpForward.addActionListener(this);
		
		comboDevice = new JComboBox();
		comboDevice.setEnabled(false);
		comboDevice.setModel(new DefaultComboBoxModel(new String[] {"Device"}));
		comboDevice.setBounds(6, 6, 143, 27);
		comboDevice.addActionListener(this);
		panel_3.add(comboDevice);
		
		ButtonGroup bg = new ButtonGroup();
		bg.add(frontRadio);
		bg.add(backRadio);
	}
	
	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//-------------------------------------------------------------------------------------------------------------------------------------
	// -- Event Detection Pane Update Events 
	
	/**
	 * Enables all of the items that can be enabled.
	 * 
	 * @param enable
	 */
	public void enableAllItems(boolean enable)
	{
		comboDevice.setEnabled(enable);
		comboChannel.setEnabled(enable);
		frontRadio.setEnabled(enable);
		backRadio.setEnabled(enable);
		jumpBackward.setEnabled(enable);
		jumpForward.setEnabled(enable);
	}

	/**
	 * Resets the graph panel when the DataModel notifies the panel that major changes took place and everything needs to reset.
	 */
	private void resetPanel()
	{
		this.comboDevice.setSelectedIndex(0);
		this.comboChannel.setSelectedIndex(0);
	}

	
	//-------------------------------------------------------------------------------------------------------------------------------------
	//-------------------------------------------------------------------------------------------------------------------------------------
	// -- Java Event Listeners 
	// -- NOTE: Also includes the Observer 'update' method

	/**
	 * Invoked when the Data Model sends out a notification that an event changed that requires the 
	 * observers to pay attention to the data coming in
	 */
	public void update(Observable o, Object arg)
	{
		//FIXME: This line should not have a ';' at the end of the if statement. This needs to be removed and consequently debugged.
		if (arg instanceof String[]);// || arg instanceof Vector)
		{
			setComboBoxTextFromData(arg);
		}
		
		// If the notification argument is a string, then either update the channel list depending on the
		// current combo box selection or have the panel reset its content to defaults.
		if (arg instanceof String)
		{
			if (comboDevice.getSelectedIndex() != 0)
			{
				// If the argument passed in arg is equal to 'Input', then we can update the comboChannel combo box with the device's channels.
				if (((String)arg).equals("Input"))
					this.setComboBoxTextFromData(this.dmp.getInputMapForDevice((String)this.comboDevice.getSelectedItem()));
				
				// If the argument passed in arg is equal to 'Reset', then we will reset the panel.
				if (((String)arg).equals("Reset"))
					resetPanel();
			}
		}

		// Check to see if arg is an instance of the DataModelProxy
		if (arg instanceof DataModelProxy)
		{
			// If dmp is null, then we assign arg to dmp.
			if (dmp == null)
				dmp = (DataModelProxy)arg;
			
			// Check to see if we loaded data successfully into the DataModel
			// If there is data loaded in the data model, then we can enable all the UI elements.
			// Otherwise we disable everything until data is loaded.
			if (dmp.dataLoaded())
			{
				enableAllItems(true);
			}
			else
			{
				enableAllItems(false);
			}	
		}		
	}

	/**
	 * Sets the appropriate combo box from data returned from the DataModelProxy
	 * 
	 * @param data
	 */
	private void setComboBoxTextFromData(Object data)
	{
		// If the data passed is an instance of a String array, we can set the 
		// combo devices data model from the object that was passed
		// Otherwise if its not a String array, we are instead setting the channel data 
		if (data instanceof String[])
		{
			// Set the combo box data to the string array that was sent
			comboDevice.setModel(new DefaultComboBoxModel((String[]) data));
		}
		else if (data instanceof Vector)
		{
			// Ensure that the data passed is not null.
			if (data != null)
			{
				int selectedIndex = comboChannel.getSelectedIndex();

				// Get the size of the vector array that was passed.
				int dataSize = ((Vector<DeviceInputMap>)data).size();
				
				// Create a string array to the length of the data sent + 1
				// This allows us to place a default string at the first position
				String[] strings = new String[dataSize + 1];
				
				// Set the first element to our default string
				strings[0] = "Choose a Channel";

				// Create string a string array for each data element and place it in the string array
				for (int i = 1; i <= dataSize; i++)
				{
					strings[i] = ((Vector<DeviceInputMap>)data).elementAt(i - 1).getChannelName();
				}
				
				// Set the combo box data to the string array we just generated
				comboChannel.setModel(new DefaultComboBoxModel(strings));
				
				if (selectedIndex != 0)
					comboChannel.setSelectedIndex(selectedIndex);
			}
		}
		else if (data == null)
		{
			comboChannel.setModel(new DefaultComboBoxModel(this.defaultChannelModel));
			comboDevice.setModel(new DefaultComboBoxModel(this.defaultDeviceModel));
		}
//	 	OLD COMBO BOX SETTING METHOD - REPLACED BY else if ON 9/13/2013 - DR
//		else 
//		{		
//			if (data != null)
//			{
//				int[] d = (int[]) data;
//				String[] strings = new String[d.length + 1];
//				
//				strings[0] = "Choose a Channel";
//				
//				for (int i = 1; i <= d.length; i++)
//				{
//					strings[i] = String.format("Channel %d", d[i - 1]);
//				}
//				
//				comboChannel.setModel(new DefaultComboBoxModel(strings));
//			}
//			else
//			{
//				comboChannel.setModel(new DefaultComboBoxModel(new String[]{"Select a Device"}));
//			}
//		}
	}
	
	/**
	 * Invoked when any of the combo boxes' values are changed, or the JButton's are clicked..
	 */
	public void actionPerformed(ActionEvent arg0) 
	{
		// Get the source object from arg0
		Object source = arg0.getSource();
		
		// If the source of the ActionEvent is the devices combo box, retrieve the list of 
		// available channels for that device.
		if (source == comboDevice)
		{
			// Create a temporary combo box element from the ActionEvent source.
			JComboBox combo = (JComboBox)source;
			
			// Get the string of the selected item from the combo box.
			String item = (String) combo.getSelectedItem();
			
			// Set the combo box text from the information returned from the DataModelProxy
			setComboBoxTextFromData((combo.getSelectedIndex() == 0) ? null : this.dmp.getInputMapForDevice(item));
		}
		else if (source == comboChannel)
		{
			System.out.println("Changing Channel Selection");
		}
		else if (source == jumpForward)
		{
			int channel = this.dmp.getChannelFromName((String)this.comboDevice.getSelectedItem(), (String)this.comboChannel.getSelectedItem());
			
			if (frontRadio.isSelected())
				this.dmp.jumpToEvent((String)comboDevice.getSelectedItem(), 1, channel, 1);
			else if (backRadio.isSelected())
				this.dmp.jumpToEvent((String)comboDevice.getSelectedItem(), 1, channel, 0);
		}
		else if (source == jumpBackward)
		{
			int channel = this.dmp.getChannelFromName((String)this.comboDevice.getSelectedItem(), (String)this.comboChannel.getSelectedItem());

			if (frontRadio.isSelected())
				this.dmp.jumpToEvent((String)comboDevice.getSelectedItem(), 0, channel, 1);
			else if (backRadio.isSelected())
				this.dmp.jumpToEvent((String)comboDevice.getSelectedItem(), 0, channel, 0);
		}
	}
}
